@model ZipZap.Models.ZipZapApp


<div class="container col-xxl-8 px-4 py-5 mt-5">
	<div class="row gy-2 h-100 row-cols-md-2 row-cols-1">
		<div class="col border-2 border-end">
			<h1 class="font-weight-bold lh-1 mb-3">ZipZap</h1>
			<h4 class="lead">
				This application will consider the two numbers entered and for each number between 1 and 100.
				It will print Zip for the numbers that are divisible by the first number. Zap will be printed for the number divisible by the second number. 
				ZipZap for the numbers divisible by both and simply print the number if it is not divisible by either. 
			</h4>

			<h2 class="mt-5 border-2 border-bottom font-weight-bold lh-1 mb-3">Instructions</h2>
			<p class = "text-warning">
				Enter 2 numbers. The first number will be used to evaluate Fizz.
				The secon number will be used to evaluate Zap and ZipZap will be determined based on the combination of the two numbers. 
			</p>
		</div>

		<div class="col">
			<div>
				<h5>Enter numbers</h5>
				@*Form goes here*@
				<form asp-controller="Home" asp-action="zzPage" method="post">
					<div class="form-group">
						<label asp-for="ZipValue">Zip Value</label>
						<input type="number" asp-for="ZipValue" class="form-control" placeholder="Enter Zip" value="@Model.ZipValue" />
					</div>
					<div class="form-group">
						<label asp-for="ZapValue">Zap Value</label>
						<input type="number" asp-for="ZapValue" class="form-control" placeholder="Enter Zap" value="@Model.ZapValue" />
					</div>
					<button type="submit" class="btn-primary btn-dark">Submit</button>
				</form>

				<h2 class="mt-5 border-bottom border-2">Result</h2>
				<div class="table-responsive overflow-x:auto">
				@*Table goes here*@
				@if (@Model.Result.Count > 0)
					{
						<table class="table-striped table-hover table table-dark table-fit">
							<thread>
								<tr><th colspan="5">ZipZap Results</th></tr>
							</thread>
							@for (int i = 0; i < Model.Result.Count(); i+=5)
							{
								<tr><td>@Model.Result[i]</td><td>@Model.Result[i + 1]</td><td>@Model.Result[i + 2]</td><td>@Model.Result[i + 3]</td><td>@Model.Result[i + 4]</td></tr>
							}
						</table>
					}
				</div>
			</div>
		</div>
	</div>
</div>